1„ÄÅ10
1/10
rm(list = ls())
library('igraph')
edges = read.csv("../data/top5CommunitiesEdges.csv", header = FALSE, sep = "\t")
rm(list = ls())
library('igraph')
setwd(getwd())
edges = read.csv("../data/top5CommunitiesEdges.csv", header = FALSE, sep = "\t")
getwd()
getwd()
getwd()
setwd(getwd())
edges = read.csv("../data/top5CommunitiesEdges.csv", header = FALSE, sep = "\t")
edges = read.csv("../data/top5CommunitiesEdges.csv", header = FALSE, sep = ",")
getwd()
getwd()
setwd("~/Document/CS249_2/project/249-Sun/src")
setwd(getwd())
getwd()
library('igraph')
edges = read.csv("../data/top5CommunitiesEdges.csv", header = FALSE, sep = ",")
edges = edges + 1
con  <- file("../top_5_communities.txt", open = "r")
edges = read.csv("../data/top5CommunitiesEdges.csv", header = FALSE, sep = ",")
edges = edges
edges = read.csv("../data/top5CommunitiesEdges.csv", header = FALSE, sep = ",")
con  <- file("../top_5_communities.txt", open = "r")
communities <- list()
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myVector <- (strsplit(oneLine, "\t"))
myVector <- list(as.numeric(myVector[[1]]))
communities <- c(communities,myVector)
}
close(con)
edges = as.matrix(edges)
g=graph.data.frame(edges,directed = FALSE)
con  <- file("../data/top5Communities.txt", open = "r")
communities <- list()
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myVector <- (strsplit(oneLine, "\t"))
myVector <- list(as.numeric(myVector[[1]]))
communities <- c(communities,myVector)
}
communities <- list()
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myVector <- (strsplit(oneLine, ","))
myVector <- list(as.numeric(myVector[[1]]))
communities <- c(communities,myVector)
}
close(con)
con  <- file("../data/top5Communities.txt", open = "r")
communities <- list()
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myVector <- (strsplit(oneLine, ","))
myVector <- list(as.numeric(myVector[[1]]))
communities <- c(communities,myVector)
}
close(con)
edges = as.matrix(edges)
g=graph.data.frame(edges,directed = FALSE)
fastgreedy.community(g)
cluster_infomap(g)
g.count()
g.vcount()
vcount(g)
ecount(g)
components(g)
cluster_infomap(g, cluster_infomap = 5)
cluster_infomap(g, nb.trials = 5)
groups= cluster_fast_greedy(g)
modularity(groups)
sizes(groups)
groups2 = cluster_infomap(g)
split_join_distance(groups)
split_join_distance(groups,groups2)
